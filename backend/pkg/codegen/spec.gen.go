// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
